'''
Mamy ùëÅ listewek (1 ‚â§ ùëÅ ‚â§ 100). Ich d≈Çugo≈õci ùëëùëó (1 ‚â§ ùëó ‚â§ ùëÅ) sƒÖ znane, podane w pe≈Çnych centymetrach,
 a najd≈Çu≈ºsza z nich nie przekracza 250 cm. Ka≈ºdƒÖ z nich mo≈ºna rozciƒÖƒá na dwie czƒô≈õci, 
 uzyskujƒÖc w ten spos√≥b dwie listewki o d≈Çugo≈õci oryginalnej listewki. Takiego rozciƒôcia 
 mo≈ºna dokonaƒá co najwy≈ºej raz (tzn., ≈ºe ≈ºadnej z dw√≥ch uzyskanych cie≈Ñszych listewek po raz 
 kolejny ju≈º rozcinaƒá nie mo≈ºemy). Dana jest docelowa d≈Çugo≈õƒá ‚àëùëó=1..ùëÅ ùëëùëó ‚â§ ùëÉ ‚â§ 50000 te≈º wyra≈ºona
 w pe≈Çnych centymetrach. Czy ze wszystkich listewek da siƒô posk≈Çadaƒá jeden d≈Çugi prosty ciƒÖg 
 listewek o d≈Çugo≈õci ùëÉ?
 '''
from pyscipopt import Model

def can_form_length(N, lengths, P):
    # Sprawdzanie, czy ≈ºadna z listewek nie przekracza 250 cm
    if any(d > 250 for d in lengths):
        print("Co najmniej jedna listwa przekracza 250 cm")
        return False
    

    model = Model("Listewki")

    # Zmienne decyzyjne
    x = [model.addVar(vtype="B", name=f"x_{i}") for i in range(N)]  # U≈ºycie pe≈Çnej listewki
    y = [model.addVar(vtype="B", name=f"y_{i}") for i in range(N)]  # U≈ºycie po≈Çowy listewki

    # Ograniczenie sumy d≈Çugo≈õci
    model.addCons(sum(lengths[i] * x[i] + (lengths[i] // 2) * y[i] for i in range(N)) == P)

    # Ograniczenia uniemo≈ºliwiajƒÖce jednoczesne wybranie pe≈Çnej i po≈Ç√≥wki tej samej listewki
    for i in range(N):
        model.addCons(x[i] + y[i] <= 1)

    # RozwiƒÖzanie modelu
    model.optimize()

    if model.getStatus() == 'optimal':
        return True
    else:
        return False

# Dane
N = 5
lengths = [100, 200, 150, 12, 10] 
P = 500

# Sprawdzenie, czy mo≈ºna u≈Ço≈ºyƒá listewki
can_form = can_form_length(N, lengths, P)
print("Czy mo≈ºna u≈Ço≈ºyƒá listewki o d≈Çugo≈õci P?", can_form)

